# Generated by Django 5.1.1 on 2024-10-26 08:18

import apps.models.managers
import apps.models.proxy_managers
import django.db.models.deletion
import django.db.models.functions.datetime
import django.utils.timezone
import django_ckeditor_5.fields
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('slug', models.SlugField(editable=False, max_length=255, unique=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('photo', models.ImageField(upload_to='categories/%Y/%m/%d', verbose_name='Photo')),
            ],
            options={
                'verbose_name': 'Category',
                'verbose_name_plural': 'Categories',
            },
        ),
        migrations.CreateModel(
            name='Concurs',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('photo', models.ImageField(upload_to='concurs/%Y/%m/%d', verbose_name='Photo')),
                ('start_date', models.DateField(verbose_name='Start date')),
                ('end_date', models.DateField(verbose_name='End date')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is active')),
            ],
            options={
                'verbose_name': 'Competition',
                'verbose_name_plural': 'Competitions',
            },
        ),
        migrations.CreateModel(
            name='District',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='Name')),
            ],
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='Name')),
            ],
        ),
        migrations.CreateModel(
            name='SiteSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fee_for_operator', models.PositiveIntegerField(blank=True, default=4000, verbose_name='Operator fee')),
                ('fee_for_currier', models.PositiveIntegerField(blank=True, default=10000, verbose_name='Currier fee')),
                ('tashkent_city', models.PositiveIntegerField(blank=True, default=20000, verbose_name='Delivery price for Tashkent city')),
                ('tashkent_region', models.PositiveIntegerField(blank=True, default=25000, verbose_name='Delivery price for Tashkent region')),
                ('other_regions', models.PositiveIntegerField(blank=True, default=35000, verbose_name='Delivery price for other regions')),
                ('min_balance_amount', models.IntegerField(default=100000, verbose_name='Minimum amount for withdraw')),
            ],
            options={
                'verbose_name': 'Site Setting',
                'verbose_name_plural': 'Site Settings',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone', models.CharField(max_length=20, unique=True, verbose_name='Phone')),
                ('photo', models.ImageField(blank=True, default='default_active_user.jpg', null=True, upload_to='users/%Y/%m/%d', verbose_name='Photo')),
                ('address', models.CharField(blank=True, max_length=255, null=True, verbose_name='Address')),
                ('about', models.TextField(blank=True, null=True, verbose_name='About user')),
                ('telegram_id', models.BigIntegerField(blank=True, null=True, unique=True, verbose_name='Telegram ID')),
                ('type', models.CharField(choices=[('admin', 'Admin'), ('customer', 'Customer'), ('operator', 'Operator'), ('currier', 'Currier')], default='customer', max_length=200, verbose_name='Type')),
                ('balance', models.IntegerField(blank=True, default=0, null=True, verbose_name='Balance')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('district', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='apps.district', verbose_name='District')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
            },
            managers=[
                ('objects', apps.models.managers.CustomUserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AdminUserProxy',
            fields=[
            ],
            options={
                'verbose_name': 'Admin',
                'verbose_name_plural': 'Admins',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('apps.user',),
            managers=[
                ('objects', apps.models.proxy_managers.AdminUserManager()),
            ],
        ),
        migrations.CreateModel(
            name='CurrierUserProxy',
            fields=[
            ],
            options={
                'verbose_name': 'Currier',
                'verbose_name_plural': 'Curriers',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('apps.user',),
            managers=[
                ('objects', apps.models.proxy_managers.CurrierUserManager()),
            ],
        ),
        migrations.CreateModel(
            name='CustomerUserProxy',
            fields=[
            ],
            options={
                'verbose_name': 'Client',
                'verbose_name_plural': 'Clients',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('apps.user',),
            managers=[
                ('objects', apps.models.proxy_managers.CustomerUserManager()),
            ],
        ),
        migrations.CreateModel(
            name='OperatorStatisticUserProxy',
            fields=[
            ],
            options={
                'verbose_name': 'Operator Statistics',
                'verbose_name_plural': 'Operators Statistics',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('apps.user',),
            managers=[
                ('objects', apps.models.proxy_managers.OperatorUserManager()),
            ],
        ),
        migrations.CreateModel(
            name='OperatorUserProxy',
            fields=[
            ],
            options={
                'verbose_name': 'Operator',
                'verbose_name_plural': 'Operators',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('apps.user',),
            managers=[
                ('objects', apps.models.proxy_managers.OperatorUserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Operator',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(blank=True, max_length=25, null=True, verbose_name='First name')),
                ('passport_number', models.CharField(max_length=20, verbose_name='Passport number')),
                ('start_work_time', models.TimeField(verbose_name='Start work time')),
                ('end_work_time', models.TimeField(verbose_name='End work time')),
                ('user', models.OneToOneField(limit_choices_to={'type': 'operator'}, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('quantity', models.PositiveIntegerField(blank=True, default=1, null=True, verbose_name='Quantity')),
                ('status', models.CharField(choices=[('new', 'New'), ('archived', 'Archived'), ('ready_to_deliver', 'Ready to deliver'), ('delivering', 'Delivering'), ('delivered', 'Delivered'), ('broken', 'Broken'), ('returned', 'Returned'), ('canceled', 'Canceled'), ('waiting', 'Waiting')], default='new', max_length=50, verbose_name='Status')),
                ('full_name', models.CharField(blank=True, max_length=50, null=True, verbose_name='Fullname')),
                ('phone', models.CharField(max_length=20, verbose_name='Phone')),
                ('comment', models.TextField(blank=True, null=True, verbose_name='Comment')),
                ('address', models.CharField(blank=True, max_length=255, null=True, verbose_name='Address')),
                ('send_date', models.DateTimeField(blank=True, null=True, verbose_name='Send date')),
                ('is_product_fee_added', models.BooleanField(blank=True, default=False, null=True, verbose_name='Is product fee added')),
                ('currier', models.ForeignKey(blank=True, limit_choices_to={'type': 'currier'}, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='currier_orders', to=settings.AUTH_USER_MODEL, verbose_name='Currier')),
                ('district', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='apps.district', verbose_name='District')),
                ('operator', models.ForeignKey(blank=True, limit_choices_to={'type': 'operator'}, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='operator_orders', to=settings.AUTH_USER_MODEL, verbose_name='Operator')),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Owner')),
            ],
            options={
                'verbose_name': 'Order',
                'verbose_name_plural': 'Orders',
            },
        ),
        migrations.CreateModel(
            name='ArchivedOrderProxy',
            fields=[
            ],
            options={
                'verbose_name': 'Archived',
                'verbose_name_plural': 'Archived',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('apps.order',),
        ),
        migrations.CreateModel(
            name='BrokenOrderProxy',
            fields=[
            ],
            options={
                'verbose_name': 'Broken',
                'verbose_name_plural': 'Broken',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('apps.order',),
        ),
        migrations.CreateModel(
            name='CanceledOrderProxy',
            fields=[
            ],
            options={
                'verbose_name': 'Canceled',
                'verbose_name_plural': 'Canceled',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('apps.order',),
        ),
        migrations.CreateModel(
            name='DeliveredOrderProxy',
            fields=[
            ],
            options={
                'verbose_name': 'Delivered',
                'verbose_name_plural': 'Delivered',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('apps.order',),
        ),
        migrations.CreateModel(
            name='DeliveringOrderProxy',
            fields=[
            ],
            options={
                'verbose_name': 'Delivering',
                'verbose_name_plural': 'Delivering',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('apps.order',),
        ),
        migrations.CreateModel(
            name='NewOrderProxy',
            fields=[
            ],
            options={
                'verbose_name': 'New',
                'verbose_name_plural': 'New',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('apps.order',),
        ),
        migrations.CreateModel(
            name='ReadyToDeliverOrderProxy',
            fields=[
            ],
            options={
                'verbose_name': 'Ready',
                'verbose_name_plural': 'Readies',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('apps.order',),
        ),
        migrations.CreateModel(
            name='ReturnedOrderProxy',
            fields=[
            ],
            options={
                'verbose_name': 'Returned',
                'verbose_name_plural': 'Returned',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('apps.order',),
        ),
        migrations.CreateModel(
            name='WaitingOrderProxy',
            fields=[
            ],
            options={
                'verbose_name': 'Waiting',
                'verbose_name_plural': 'Waiting',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('apps.order',),
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('slug', models.SlugField(editable=False, max_length=255, unique=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('price', models.PositiveIntegerField(help_text='In sum', verbose_name='Price')),
                ('photo', models.ImageField(upload_to='products/%Y/%m/%d', verbose_name='Photo')),
                ('quantity', models.PositiveIntegerField(verbose_name='Quantity')),
                ('discount', models.CharField(blank=True, max_length=255, null=True, verbose_name='Discount')),
                ('description', django_ckeditor_5.fields.CKEditor5Field(verbose_name='Description')),
                ('product_fee', models.PositiveIntegerField(blank=True, help_text='In sum', null=True, verbose_name='Product fee')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='apps.category', verbose_name='Category')),
            ],
            options={
                'verbose_name': 'Product',
                'verbose_name_plural': 'Products',
            },
        ),
        migrations.AddField(
            model_name='order',
            name='product',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='orders', to='apps.product', verbose_name='Product'),
        ),
        migrations.AddField(
            model_name='order',
            name='region',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='apps.region', verbose_name='Region'),
        ),
        migrations.AddField(
            model_name='district',
            name='region',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='apps.region', verbose_name='Region'),
        ),
        migrations.CreateModel(
            name='Currier',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user', models.OneToOneField(limit_choices_to={'type': 'currier'}, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('district', models.ManyToManyField(to='apps.district', verbose_name='District')),
                ('region', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='apps.region', verbose_name='Region')),
            ],
        ),
        migrations.CreateModel(
            name='SpamUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('phone', models.CharField(max_length=20, unique=True, verbose_name='Phone')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Spam',
                'verbose_name_plural': 'Spams',
            },
        ),
        migrations.CreateModel(
            name='Stream',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('discount', models.PositiveIntegerField(blank=True, default=0, null=True, verbose_name='Discount')),
                ('visit_count', models.PositiveIntegerField(default=0, verbose_name='Amount of visits')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Owner')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='apps.product', verbose_name='Product')),
            ],
            options={
                'ordering': ('-id',),
            },
        ),
        migrations.AddField(
            model_name='order',
            name='stream',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='orders', to='apps.stream', verbose_name='Stream'),
        ),
        migrations.CreateModel(
            name='Transaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('card_number', models.CharField(max_length=200, verbose_name='Account number')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed'), ('returned', 'Returned'), ('canceled', 'Canceled'), ('disputed', 'Disputed'), ('expired', 'Expired'), ('on_hold', 'On_hold')], default='pending', max_length=20, verbose_name='Status')),
                ('amount', models.IntegerField(verbose_name='Amount')),
                ('message', models.TextField(blank=True, null=True, verbose_name='Message')),
                ('photo', models.ImageField(blank=True, null=True, upload_to='transactions/%Y/%m/%d', verbose_name='Photo')),
                ('is_payed', models.BooleanField(default=False, verbose_name='Is payed')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Owner')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
